{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nexport const useApiProgress = path => {\n  _s();\n\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    const updateState = (url, status) => {\n      if (path === url) {\n        setPendingApiCall(status);\n      }\n    };\n\n    let requestId = 0,\n        responseId = 0;\n\n    const registerInerception = () => {\n      requestId = axios.interceptors.request.use(request => {\n        updateState(request.url, true);\n        return request;\n      });\n      responseId = axios.interceptors.response.use(response => {\n        updateState(response.config.url, false);\n        return response;\n      }, error => {\n        updateState(error.config.url, false);\n        throw error;\n      });\n    };\n\n    registerInerception();\n    return function unmOunt() {\n      axios.interceptors.request.eject(requestId);\n      axios.interceptors.response.eject(responseId);\n    };\n  });\n  return pendingApiCall;\n};\n\n_s(useApiProgress, \"dxeikoFXtsTGpF/7CQdkmajlavs=\");","map":{"version":3,"names":["axios","useEffect","useState","useApiProgress","path","pendingApiCall","setPendingApiCall","updateState","url","status","requestId","responseId","registerInerception","interceptors","request","use","response","config","error","unmOunt","eject"],"sources":["/Users/epazar/Documents/workspace/UI/frontend/src/common/ApiProgress.tsx"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\nimport { useEffect, useState } from 'react';\n\nexport const useApiProgress = (path: string) => {\n\n    const [pendingApiCall, setPendingApiCall] = useState(false);\n\n    \n\n    useEffect(() => {\n        const updateState = (url: string, status: boolean): void => {\n            if (path === url) {\n                setPendingApiCall(status);\n            }\n    \n        }\n        \n        let requestId=0,responseId=0;\n\n        const registerInerception = () =>\n        {\n            requestId = axios.interceptors.request.use((request: AxiosRequestConfig) => {\n                updateState(request.url!,true);\n                return request;\n            });\n    \n            responseId = axios.interceptors.response.use((response) => {\n                updateState(response.config.url!,false);\n                return response;\n    \n            }, (error) => {\n                updateState(error.config.url!,false);\n                throw error;\n            });\n        }\n\n        registerInerception();\n\n        \n\n        return function unmOunt(){\n            axios.interceptors.request.eject(requestId);\n            axios.interceptors.response.eject(responseId);\n        }\n\n    });\n\n    return pendingApiCall;\n}\n\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAP,MAA0C,OAA1C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAkB;EAAA;;EAE5C,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCJ,QAAQ,CAAC,KAAD,CAApD;EAIAD,SAAS,CAAC,MAAM;IACZ,MAAMM,WAAW,GAAG,CAACC,GAAD,EAAcC,MAAd,KAAwC;MACxD,IAAIL,IAAI,KAAKI,GAAb,EAAkB;QACdF,iBAAiB,CAACG,MAAD,CAAjB;MACH;IAEJ,CALD;;IAOA,IAAIC,SAAS,GAAC,CAAd;IAAA,IAAgBC,UAAU,GAAC,CAA3B;;IAEA,MAAMC,mBAAmB,GAAG,MAC5B;MACIF,SAAS,GAAGV,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAiC;QACxEP,WAAW,CAACO,OAAO,CAACN,GAAT,EAAc,IAAd,CAAX;QACA,OAAOM,OAAP;MACH,CAHW,CAAZ;MAKAH,UAAU,GAAGX,KAAK,CAACa,YAAN,CAAmBG,QAAnB,CAA4BD,GAA5B,CAAiCC,QAAD,IAAc;QACvDT,WAAW,CAACS,QAAQ,CAACC,MAAT,CAAgBT,GAAjB,EAAsB,KAAtB,CAAX;QACA,OAAOQ,QAAP;MAEH,CAJY,EAITE,KAAD,IAAW;QACVX,WAAW,CAACW,KAAK,CAACD,MAAN,CAAaT,GAAd,EAAmB,KAAnB,CAAX;QACA,MAAMU,KAAN;MACH,CAPY,CAAb;IAQH,CAfD;;IAiBAN,mBAAmB;IAInB,OAAO,SAASO,OAAT,GAAkB;MACrBnB,KAAK,CAACa,YAAN,CAAmBC,OAAnB,CAA2BM,KAA3B,CAAiCV,SAAjC;MACAV,KAAK,CAACa,YAAN,CAAmBG,QAAnB,CAA4BI,KAA5B,CAAkCT,UAAlC;IACH,CAHD;EAKH,CApCQ,CAAT;EAsCA,OAAON,cAAP;AACH,CA7CM;;GAAMF,c"},"metadata":{},"sourceType":"module"}